name: Open PR

on:
  workflow_dispatch:
    inputs:
      advisory:
        required: false
        description: Advisory ID, or URL (e.g. GHSA-123, or https://github.com/advisories/GHSA-123)
      issue:
        required: false
        description: Issue number, or URL (e.g. 1, or https://github.com/brave/brave-browser/issues/1)
      comment:
        required: false
        description: Comment (optional)

env:
  DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  open-pr:
    name: 
    runs-on: ubuntu-latest
    env:
      advisory: ${{ inputs.advisory }}
      issue: ${{ inputs.issue }}
      comment: ${{ inputs.comment }}
      issues_url: 'https://github.com/brave/brave-browser/issues'
      npm_adv_url: 'https://github.com/advisories'
      cargo_adv_url: 'https://rustsec.org/advisories'
    steps:
      - name: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.repository.default_branch }}
      - name: open pr
        run: |
          ### Fail fast

          set -xeEo pipefail
          shopt -s inherit_errexit

          error() { echo "::error::${1:?}"; echo "$1" >>"${GITHUB_STEP_SUMMARY:?}"; exit 2; }

          ### Process inputs

          case "$issue" in
              [0-9]*)
                  issue_url="${issues_url:?}/$issue";;
              "${issues_url:?}"/[0-9]*|https://github.com/brave*)
                  issue_url="$issue";;
              "") ;;
              *) error "Invalid issue format: $issue";;
          esac

          advisory_id="${advisory##*/}"

          case "$advisory" in
              GHSA-*)
                  advisory_url="${npm_adv_url:?}/${advisory_id:?}";;
              "${npm_adv_url:?}"/GHSA-*)
                  advisory_url="$advisory";;
              RUSTSEC-*)
                  advisory_url="${cargo_adv_url:?}/$advisory";;
              "${cargo_adv_url:?}"/RUSTSEC-*)
                  advisory_url="$advisory";;
              "") ;;
              *) error "Invalid advisory format: $advisory";;
          esac

          case "$issue_url,$advisory" in
              ,) error "Either the advisory, or the issue must be specified";;
              ,*) issue_title="Audit finding: $advisory_url"
                  issue_repo="$(cut -d/ -f4-5 <<<"$issues_url")"
                  issue_url="$(gh -R "${issue_repo:?}" issue list -A brave-builds -l bot/type/audit \
                      -S "${issue_title:?}" --json title,url -q '.[]|select(.title=="'"$issue_title"'").url')";;
              *,) if grep -q "^$issues_url" <<<"$issue_url"; then
                      issue_title="$(gh issue view "$issue_url" --json title -q .title)"
                      advisory_id="${issue_title##*/}"
                      advisory_url="${issue_title#Audit finding: }"
                  else
                      error "The advisory can only be inferred from brave-browser issues created by brave-builds"
                  fi;;
          esac

          ### Construct the new config.json entry

          to_json() { printf "%s" "$*"|jq -Rsa .; }

          ty="$(grep -q '^GHSA' <<<"${advisory_id:?}" && echo npm || echo cargo)"
          advisory_entry="$([[ "${ty:?}" == npm ]] && echo "${advisory_url:?}" || echo "${advisory_id:?}")"

          advisory_json='"advisory": '"$(to_json "${advisory_entry:?}")"
          issue_json='"issue": '"$(to_json "$issue_url")"
          [[ ! "$comment" ]] || comment_json=', "comment": '"$(to_json "$comment")"
          json="{ ${advisory_json:?}, ${issue_json:?} $comment_json }"

          ### Update config.json

          echo "$(jq -r ".ignore.$ty += [${json:?}]" config.json)" >config.json

          ### Create a branch with the updated config.json and a PR based on it

          branch="ignore-$advisory_id"
          sha="$(gh api "/repos/${GITHUB_REPOSITORY:?}/git/refs/heads/${DEFAULT_BRANCH:?}"|jq -r .object.sha)"
          gh api --method POST "/repos/$GITHUB_REPOSITORY/git/refs" -f ref="refs/heads/${branch:?}" -f sha="${sha:?}"
          gh api --method PUT "/repos/$GITHUB_REPOSITORY/contents/config.json" \
              --field branch="$branch" \
              --field content="$(base64 -w0 <config.json)" \
              --field encoding="base64" \
              --field message="Ignore $advisory_id" \
              --field sha="$(git rev-parse --verify "$DEFAULT_BRANCH:config.json")"
          gh pr create -B "$DEFAULT_BRANCH" -H "$branch" -t "Ignore $advisory_id" -b "Resolves $issue_url"
